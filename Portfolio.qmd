---
title: "Stat 541 Final Portfolio"
format: pdf
editor: visual
self-contained: true
toc: true
---

```{r}
#| include: false
#| label: packages-portfolio-objectives

library(tidyverse)

portfolio_levels <- tibble(
  Objective = character(), 
  Level = numeric() 
  )
```

# Independent Learning (IL):

*These objectives show your ability to seek out new information and adapt to new tools to solve data analysis problems.*

------------------------------------------------------------------------

## \[IL-1\] Adding new skills:

-   I can find and adopt new packages to accomplish tasks.
-   I can adapt to different syntax styles (tidy, base, formula style, data.table).
-   I can use tutorials, etc. to enhance my understanding of new concepts

```{r}
#| include: false
#| label: IL-1

## Fill in the line below with your self-assigned level for this objective.
## Remember, you have the following levels to choose from:

# 1 = novice
# 2 = proficiency
# 3 = mastery 
# 4 = expert

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "IL-1",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab2](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-evadykaar/pull/7/files):
I read the documentation for the ggpubr package to be able to enhance my data visualization. 

[Lab4](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/pull/1/files): 
I read in the data when it was a txt file (base R).

[Project1](https://github.com/lana1218/STAT-541-Project1/pull/4/files): 
I followed a Youtube tutorial to enhance the UI/UX of our Shiny app. 

------------------------------------------------------------------------

## \[IL-2\] Online resources:

-   I can use online resources (Google, ChatGPT, StackOverflow) to solve problems, debug, or find new tools.
-   I can find source code for similar projects to use as starting points for my own
-   I can read the documentation of an API to figure out how to access data.

```{r}
#| include: false
#| label: IL-2

## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "IL-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

Github: I used online resources to learn how to use git commands. Additionally, I learned about best practices for Github during collaboration.

[Project1](https://github.com/lana1218/STAT-541-Project1/pull/1/files):
We used ChatGPT to set up the RShiny app 

[Project1](https://github.com/lana1218/STAT-541-Project1/pull/4/files):
I watched a Youtube video titled "How to bring modern UI to your Shiny apps" in order to make our app look prettier. 

[Lab4](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/commit/310d808736f7290c90ef22852482a62a227aa92e):
We had to look at the information/documentation ont he satellite passes website to figure out how to use the API to access the JSON data.

------------------------------------------------------------------------

# Reproducible Workflow (RW):

*These objectives show your ability to produce artifacts and deliverables that are organized, documented, version tracked, and responsibly designed.* \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

## \[RW-1\] File, code, and data management:

-   I can use Git and GitHub to track my progress and collaborate (creating repos, cloning, forking, pull requesting).
-   I always use R Projects and the {here} package to organize my scripts, notebooks, data, and applications.

```{r}
#| include: false
#| label: RW-1

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-1",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

Github: Before this class, I never really used Git and Github. I'm glad that one of the goals since the beginning of the class was to learn about it, and I have been taking that very seriously. I learned git commands, so that I can use Github features outside of R. My partner, Eva, was not very well versed in data management, so I helped her answer questions about Github related stuff. I ran into merge conflicts, and I was able to help solve that.

[Project1](https://github.com/lana1218/STAT-541-Project1/pull/2/files): 
I set up this Github repository, and organized the files in its correct directory such as "Data" and "Scripts". I used the "here" package when reading in my data.

[Lab4](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/pull/1/files): 
Another example of organizing files in appropriate directories and using the "here" package. 

------------------------------------------------------------------------

## \[RW-2\] Notebooks:

-   I can use Quarto and/or R Markdown to produce a reproducible notebook and polished rendered document.
-   I can use appropriate chunk options (echo, error, cache, etc.) to render my qmd/Rmd quickly and cleanly.

```{r, include = FALSE}
#| include: false
#| label: RW-2

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-2",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab2](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-evadykaar/pull/7/files):
I used Quarto formatting styles to organize all of the bullet points presented in this analysis 

[Lab3](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/pull/7/files):
I added to the YAML to intentionally set the global chunk options(echo, include, message, warning).

[Lab4](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/pull/1/files):
I added labels to my code chunks to make it easier to navigate in my notebook.

------------------------------------------------------------------------

## \[RW-3\] Code style

-   My code is clear, readable, well-organized, and well-commented.
-   I can use a package-based workflow to organize my analyses

```{r}
#| include: false
#| label: RW-3

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-3",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification

[Lab2](https://github.com/Cal-Poly-Advanced-R/introduction-to-webscraping-brendad8/pull/8/files):
I fixed the formatting from the work that my teammates did. The bullet points were not consistent, so I made sure they were. 

[Project2](https://github.com/lana1218/rbooty/pull/8/files):
I made comments to every part of my code to indicate what is happening. For example, I labeled where the stopping conditions began and what kind of statistics are the valid inputs. 

------------------------------------------------------------------------

# Technical Communication (TC):

*These objectives show your ability to communicate the processes you have implemented in your code, as well as the data conclusions and results.*

------------------------------------------------------------------------

## \[TC-1\] Project summaries:

-   I can clearly and succinctly summarize the contributions of my project.
-   I accurately interpret statistical or modeling results.
-   I consider the appropriate scope and impact of my project results.

```{r}
#| include: false
#| label: TC-1

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "TC-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab1](https://github.com/Cal-Poly-Advanced-R/lab-1-review-evadykaar/pull/10/files): 
I interpreted the p-values for the predictors. 

(Project1)[https://github.com/lana1218/STAT-541-Project1/commit/1c666a4502ce04d60321eb9d84908587a559ff1d]: 
We wrote this in class together, but essentially, this README file contained information about an overview of our dataset, data cleaning steps, scrips and files in our folder, and the capabilities of the app. 

[Project2](https://github.com/lana1218/rbooty/pull/11/files): 
I created a README file for our package using R markdown. This allowed the user to see a high-level overview of the capabilities of the package. This README file included a description of the package overall as well as a few use cases and sample code. 

------------------------------------------------------------------------

## \[TC-2\] Documentation:

-   I provide ample documentation and tutorials for my custom functions.
-   I provide user-friendly guides for my tools and software

```{r}
#| include: false
#| label: TC-2

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "TC-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Project2](https://github.com/lana1218/rbooty/pull/8/files):
I wrote a custom function for the package and provided documentation in the form of a docstring, so that the user is able to prompt the "help" in R and understand how to use the function. 

[Project2](https://github.com/lana1218/rbooty/pull/11/files):
I created a README file for our package using R markdown. This allowed the user to see a high-level overview of the capabilities of the package. Additionally, there were examples of use cases and sample code, so that the user is able to follow along and replicate. 

------------------------------------------------------------------------

# Data Manipulation (DM):

*These objectives relate to the collection, cleaning, processing, and preparing of datasets for analysis.*

------------------------------------------------------------------------

## \[DM-1\] Data preparation:

-   I can read in datasets to R, including untidy ones.
-   I can clean datasets to deal with missing data, typos, poor formatting, etc.

```{r, include = FALSE}
#| include: false
#| label: DM-1

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "DM-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab1](https://github.com/Cal-Poly-Advanced-R/lab-1-review-evadykaar/pull/6/files):
I had to clean up the "date of birth" variable since all of the observations had many different types of formats.

[Lab2](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-evadykaar/pull/1/files):
We read in the dataset (xlsx format) using read_excel. Since we need to change the coding of the variable from numeric to the actual region, I suggested using a "mutate case when" function in order to reassign the different regions. 

[Lab3](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/commit/70f887c48c35f1dc25b48bb39024dda8ddd8138f): 
We read in the states_capital.txt dataset. 

[Project1](https://github.com/lana1218/STAT-541-Project1/pull/2/files): 
The "911 calls" dataset from the Seattle website consisted of almost 2 million rows. I took a sample of that dataset and saved it to a new csv file. I cleaned our dataset by making sure our variables are in Datetime format. Even though our sampled file was significantly smaller than before, I still needed to filter it by the year 2023 so that the app does not lag as much. 

[Lab9](https://github.com/lana1218/STAT-541-Lab9/commit/11182a08e09678a08d50c2c5c6dee6e366c810cf):
I cleaned the "surf" dataset to only include numeric values, so that I can generate art from it. 

------------------------------------------------------------------------

## \[DM-2\] Data wrangling

-   I can cleverly use pivoting, grouping, and joining to wrangle data.
-   I can use mapping ({purrr}), applying (tapply, lapply, ...), and/or iteration (for loops) to perform repeated tasks.

```{r, include = FALSE}
#| include: false
#| label: DM-2

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "DM-2",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab1](https://github.com/Cal-Poly-Advanced-R/lab-1-review-evadykaar/pull/6/files):
I used a lot of of tidyverse's data wrangling functions to find the answer to Part 2's questions. This includes functions such as group_by, summarize, slice_max, mutate, etc. Additionally, we received an expert level grade for this portion of the lab. 

[Lab3](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/commit/4f6f56e604d22ab2b10d94bffad922daa53e65dc):
We used the map_dfr function to "map" the JSON data to a data frame.

------------------------------------------------------------------------

## \[DM-3\] Data formats

-   I can use API urls to access JSON data and convert it to a data frame

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(tibble(Objective = "DM-3", 
                   Level = my_level))
```

### Level: `r my_level`

### Justification

[Lab3](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/commit/310d808736f7290c90ef22852482a62a227aa92e https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/commit/4f6f56e604d22ab2b10d94bffad922daa53e65dc):
We had to look at the information/documentation ont he satellite passes website to figure out how to use the API to access the JSON data. We then used the map_dfr to return it as a dataframe. 

------------------------------------------------------------------------

## \[DM-4\] Data collection

-   I can webscrape simple tables and information

```{r}
#| include: false
#| label: DM-4

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "DM-3", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification

[Lab4](https://github.com/Cal-Poly-Advanced-R/introduction-to-webscraping-brendad8/pull/6/files): We used web scraping to get the information about each of the ten cheeses, with the help of Chat GPT. 

------------------------------------------------------------------------

# Professional Visualization (PV):

------------------------------------------------------------------------

## \[PV-1\] ggplot: grammar of graphics

-   I can use less common geometries, including those from ggplot extension packages.
-   I can use the correct aesthetics to map variables
-   I understand how geometries inherit aesthetics I can add annotations to my plot

```{r}
#| include: false
#| label: PV-1

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab2](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-evadykaar/pull/7/files): 
When recreating the "ugly" plot from this lab, I had to make a new data frame in order to manipulate the variables for plotting. I ordered the categorical variables by using the factor function. 

[Project2](https://github.com/lana1218/rbooty/pull/5/files):
Here is an example where I set up a function to plot a histogram, given a bootstrap distribution. Another parameter that I added to the function was "statistic," so I can use the user's input to give the plot a title. 

[Lab9](https://github.com/lana1218/STAT-541-Lab9/commit/11182a08e09678a08d50c2c5c6dee6e366c810cf): 
I used ggplot to plot my points from an existing dataset in polar coordinates to make art! 

[Lab9](https://github.com/lana1218/STAT-541-Lab9/commit/31efda82af6dd241a453c7048397c1008d0d543a): 
I used ggplot from data points that were generated from uniform distributions in order to make art! 

------------------------------------------------------------------------

## \[PV-2\] ggplot: theme

-   I can edit the titles, subtitles, captions, axis labels, etc. to create a clearly labelled plot
-   I can choose colors ("scales") and themes to make a visually pleasing and accessible plot

```{r}
#| include: false
#| label: PV-2

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab2](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-evadykaar/pull/7/files):
To clearly label my plot, I gave it a title and subtitle. I also removed the default axis labels since we did not need them for the plot to be clear. 

[Lab3](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-evadykaar/pull/7/files):
To recreate the "ugly" plot from the original report, I utilized a variety of theme functions to make the plot look as nice as possible. For this plot in particular, I used "theme_pubr" so that it is ready for publication. Additionally, I made sure the texts were the correct size so that it is readable. I gave the plot a title to the plot to indicated what the variables are, and I made a subtitle to indicate what trend the reader should be seeing. 

[Lab9](https://github.com/lana1218/STAT-541-Lab9/commit/11182a08e09678a08d50c2c5c6dee6e366c810cf):
Here is an example where I chose a color palette called "Surf and Turf" for my art piece. I also gave it a title.

------------------------------------------------------------------------

## \[PV-3\] Dynamic visualizations

-   I can use a package like {gganimate} to create self-contained gifs
-   I can use a package like {plotly}, {ggplotly}, {leaflet}, {ggirafe}, etc. to make interactive html widgets

```{r}
#| include: false
#| label: PV-3

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-3", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

Project1: I made a leaflet plot. https://github.com/lana1218/STAT-541-Project1/pull/2/files

Lab4: We made a dynamic visualization to animate the route of the ISS. https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/pull/7/files

------------------------------------------------------------------------

## \[PV-4\] Shiny

-   I can create a functional Shiny app.
-   I understand the principle of reactivity, and how to use it.

```{r}
#| include: false
#| label: PV-4

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-4", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

Project1: I created a Shiny App that displays a map of 911 accidents in Seattle, a time-series plot, and the average number of accidents per day. The filters that the user can toggle with include the type of accident and the month of accident. Not only can I implement these features and explain them thoroughly, but I can make a beautiful user-interface. I made a toggle for the filters, so that the user can close them if they wanted full-screen the output. Additionally, I intentionally chose appealing themes, fonts, and colors. https://github.com/lana1218/STAT-541-Project1/pull/4/files https://github.com/lana1218/STAT-541-Project1/pull/2/files

Lab4: We created a Shiny app to display the route of the ISS. I made the app look prettier using the UI skills that I learned from the previous project. https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/pull/7/files

------------------------------------------------------------------------

# Software Development (SD):

*These objectives relate to your ability to develop correct, usable, well-designed, and sophisticated software in the R language.*

------------------------------------------------------------------------

## \[SD-2\] Package creation:

-   I can create a folder that is installable as an R package, possibly using {usethis} helper functions
-   I can document my functions using {roxygen2} style commenting
-   I can write and run unit tests using {testthat}
-   I can design a package that is user-friendly and has well-designed functions.

```{r}
#| include: false
#| label: SD-2

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "SD-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification

Project2: There is no pull request, but I set up the R package using the {use this} helper functions

Project2: I made sure all of the functions that I wrote was well-documented using {roxygen2} style commenting.

<https://github.com/lana1218/rbooty/pull/5/files>

<https://github.com/lana1218/rbooty/pull/8>

Project2: I helped brainstorm what kind of unit tests were needed for our R package.

<https://github.com/lana1218/rbooty/pull/13/files>

Project2: I helped make our package more user friendly by adding use cases to our README file.

<https://github.com/lana1218/rbooty/pull/11/files>

------------------------------------------------------------------------

# Algorithms and Iteration (AI):

*These objectives ask you to design code-based approaches to statistical computing problems, usually involving iteration to a stopping condition.*

------------------------------------------------------------------------

## \[AI-1\] Creating an algorithm:

-   I can invent and implement my own iterative algorithm.
-   I have built in checks for possible problems or extreme cases in the algorithm.

```{r}
#| include: false
#| label: AI-1

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "AI-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab3](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/commit/310d808736f7290c90ef22852482a62a227aa92e): I helped brainstorm how to get the url for the 3 closes future international space stations passes.

[Project2](https://github.com/lana1218/rbooty/pull/8/files): I created stopping conditions for the case that the user inputs something invalid.

------------------------------------------------------------------------

## \[AI-2\] Generative art:

-   I can apply a variety of generative art functions to make a visually pleasing piece.
-   I can explain why particular changes to the code result in particular differences in the visualization.

```{r}
#| include: false
#| label: AI-2

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "AI-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab9](https://github.com/lana1218/STAT-541-Lab9/commit/31efda82af6dd241a453c7048397c1008d0d543a): I created generative art by making functions to sample data, color palettes, and plot points. I explained how I utilized different angles and radii lengths to make my art.

[Lab9](https://github.com/lana1218/STAT-541-Lab9/commit/11182a08e09678a08d50c2c5c6dee6e366c810cf): I also created art using an existing dataset.

------------------------------------------------------------------------

# Code Design (CD):

*These objectives relate to making wise or clever choices in how you implement a procedure in code; including creating functions and objects, or thinking about the clarity and efficiency of processes.*

------------------------------------------------------------------------

## \[CD-1\] Speed and Efficiency:

-   I can recognize moments of possible slowdown in my code, and use built-in functions or parallelizing to speed them up.
-   I always use and design vectorized functions whenever possible.

```{r}
#| include: false
#| label: CD-1

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab3](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-joshblank73/commit/310d808736f7290c90ef22852482a62a227aa92e): 
I suggested using sapply to vectorize our process.

[Project2](https://github.com/lana1218/rbooty/pull/8/files):
I used an "if" and "else if" logic to minimizing the number of checks I needed to do (boolean zen).

------------------------------------------------------------------------

## \[CD-2\] Object handling:

-   I can make reasonable choices in my code design about when to save intermediate objects.
-   I can convert objects between types and structures as needed.

```{r}
#| include: false
#| label: CD-2

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[CD-3\] Supporting functions:

-   I write helper/shortcut functions to streamline repeated tasks and make my code easier to read.
-   I use intermediate functions to streamline repeated or looping processes.

```{r}
#| include: false
#| label: CD-3

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-3", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[Lab9](https://github.com/lana1218/STAT-541-Lab9/commit/11182a08e09678a08d50c2c5c6dee6e366c810cf): I used helper functions to sample color palettes and data.

------------------------------------------------------------------------

# Summary

```{r}
#| echo: false
#| label: summary-graph

portfolio_levels %>%
  mutate(
    Category = str_extract(Objective, "[A-Z]{2}"),
    Level = factor(Level)
  ) %>%
  ggplot(
    aes(x = Level, 
        y = (..count..)/sum(..count..)
        )
    ) +
  geom_bar() +
  labs(x = "Level",
       y = "Percent") +
  theme_bw() +
  scale_y_continuous(labels = scales::percent)
```

## Grade

Based on the summary plot above, I believe I have earned an A in STAT 541.

### Justification

Based on the content of this course, I think I have put a lot of effort into learning and mastering the learning objectives for each week. Although I still have a lot of 1s and 2s at this time, I will continue to build upon my portfolio in the coming weeks to show that I fully mastered the material.
